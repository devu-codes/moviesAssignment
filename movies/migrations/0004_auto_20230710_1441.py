# Generated by Django 2.2.15 on 2023-07-10 14:41

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import movies.models
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('movies', '0003_collection_movie_remove_moviescollection_collection_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='AbstractEmailUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=64, unique=True, verbose_name='Email Address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', movies.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='RequestCounter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Request Counter',
                'verbose_name_plural': 'Request Counters',
            },
        ),
        migrations.AlterModelOptions(
            name='collection',
            options={'verbose_name': 'Collection', 'verbose_name_plural': 'Collections'},
        ),
        migrations.AlterModelOptions(
            name='movie',
            options={'verbose_name': 'Movie', 'verbose_name_plural': 'Movies'},
        ),
        migrations.RemoveField(
            model_name='collection',
            name='id',
        ),
        migrations.RemoveField(
            model_name='collection',
            name='user',
        ),
        migrations.RemoveField(
            model_name='movie',
            name='collection',
        ),
        migrations.RemoveField(
            model_name='movie',
            name='genres',
        ),
        migrations.RemoveField(
            model_name='movie',
            name='id',
        ),
        migrations.AddField(
            model_name='movie',
            name='genre',
            field=models.TextField(blank=True, null=True, verbose_name='Genre'),
        ),
        migrations.AlterField(
            model_name='collection',
            name='description',
            field=models.TextField(blank=True, null=True, verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='collection',
            name='title',
            field=models.CharField(blank=True, max_length=128, null=True, verbose_name='Title'),
        ),
        migrations.AlterField(
            model_name='collection',
            name='uuid',
            field=models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='movie',
            name='description',
            field=models.TextField(blank=True, null=True, verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='movie',
            name='title',
            field=models.CharField(max_length=128, verbose_name='Title'),
        ),
        migrations.AlterField(
            model_name='movie',
            name='uuid',
            field=models.CharField(editable=False, max_length=128, primary_key=True, serialize=False),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('abstractemailuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='movies.AbstractEmailUser')),
                ('description', models.TextField(blank=True, max_length=128, null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            bases=('movies.abstractemailuser',),
            managers=[
                ('objects', movies.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='MoviesCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='moviecollection_collections', to='movies.Collection')),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='moviecollection_movies', to='movies.Movie')),
            ],
            options={
                'verbose_name': 'Movies Collection',
                'verbose_name_plural': 'Movies Collections',
                'unique_together': {('collection', 'movie')},
            },
        ),
        migrations.AddField(
            model_name='collection',
            name='movies',
            field=models.ManyToManyField(blank=True, related_name='movies_collection', through='movies.MoviesCollection', to='movies.Movie'),
        ),
        migrations.AddField(
            model_name='collection',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
